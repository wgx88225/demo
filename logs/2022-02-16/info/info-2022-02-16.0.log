2022-02-16 16:41:38.312 [XNIO-1 task-1] INFO  traceId[17c495d4-e87c-48ad-b734-399a4e509f40] com.example.demo.controller.TopicManageController:33 - 提交题目信息：{"createBy":"0","errorNum":1,"img":"","optionItem":[{"correct":true,"option":"代理模式","serialNumber":1},{"correct":false,"option":"外观模式","serialNumber":2},{"correct":false,"option":"桥接模式","serialNumber":3},{"correct":false,"option":"组合模式","serialNumber":4}],"queSetId":2,"remark":"【2010 年题 50 解析】 本题主要考查设计模式的理解与应用。根据题干描述，该编辑器需要在文档中嵌入显示 开销很大的图形对象，为了能够提高系统效率，需要避免同时创建这些图像。这对这些要求， 对比候选项，可以发现代理模式可以解决直接访问对象时带来的问题，例如：要访问的对象 在远程的机器上；对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问 等。因此代理模式是最为合适的设计模式。答案 A","topicDesc":"【2010 年题 50】某公司开发一个文档编辑器，该编辑器允许在文档中直接嵌入图形对 象，但开销很大。用户在系统设计之初提出编辑器在打开文档时必须十分迅速，可以暂 时不显示当前页面以外的图形。针对这种需求，公司可以采用( )避免同时创建这些图 形对象。","topicType":1,"updateB":"0"}
2022-02-16 16:41:38.372 [XNIO-1 task-1] INFO  traceId[17c495d4-e87c-48ad-b734-399a4e509f40] com.example.demo.Interceptor.LogInterceptor:45 - 调用结束后删除...
2022-02-16 16:44:50.503 [XNIO-1 task-1] INFO  traceId[a29ff823-27de-4b6c-9f94-62b042a2dcdc] com.example.demo.controller.TopicManageController:33 - 提交题目信息：{"createBy":"0","errorNum":1,"img":"","optionItem":[{"correct":true,"option":"状态模式","serialNumber":1},{"correct":false,"option":"适配器模式","serialNumber":2},{"correct":false,"option":"组合模式","serialNumber":3},{"correct":false,"option":"单例模式","serialNumber":4}],"queSetId":2,"remark":"【2011 年题 12 解析】针对需求 2，为了封装图像操作与照片特征之间的复杂逻辑关系，采用状态模式最为合 适，因为状态模式将每一个条件分支放入一个独立的类中，这样就可以根据对象自身的情况 将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化；。答案 A","topicDesc":"【2012 年题 12】某软件公司欲设计一款图像处理软件，帮助用户对拍摄的照片进行后 期处理。在软件需求分析阶段，公司的系统分析师识别出了如下 3 个关键需求。 图像处理软件需要记录用户在处理照片时所有动作，并能够支持用户动作的撤销与重做 等行为。图像处理软件需要根据当前正在处理的照片的不同特征选择合适的处理操作，处理操作 与照片特征之间具有较为复杂的逻辑关系。 图像处理软件需要封装各种图像处理算法，用户能够根据需要灵活选择合适的处理算 法：软件还要支持高级用户根据一定的规则添加自定义处理算法。 在系统设计阶段，公司的架构师决定采用设计模式满足上述关键需求中对系统灵活性与 扩展性的要求。具体来说，为了封 装图像操作与照片特征之间的复杂逻辑关系，采用( )最为合适；","topicType":1,"updateB":"0"}
2022-02-16 16:44:50.530 [XNIO-1 task-1] INFO  traceId[a29ff823-27de-4b6c-9f94-62b042a2dcdc] com.example.demo.Interceptor.LogInterceptor:45 - 调用结束后删除...
2022-02-16 16:46:30.363 [XNIO-1 task-1] INFO  traceId[58e200b7-ba5b-4149-9443-045102bad55b] com.example.demo.controller.TopicManageController:33 - 提交题目信息：{"createBy":"0","errorNum":1,"img":"","optionItem":[{"correct":true,"option":"外观","serialNumber":1},{"correct":false,"option":"装饰","serialNumber":2},{"correct":false,"option":"桥接","serialNumber":3},{"correct":false,"option":"享元","serialNumber":4}],"queSetId":2,"remark":"【2011 年题 13 解析】 外观(façade)模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一 的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接 口，这个接口使得这一子系统更加容易使用。 【答案】A。","topicDesc":"【2012 年题 13】若系统中的某子模块需要为其他模块提供访问不同数据库系统的功能， 这些数据库系统提供的访问接口有一定的差异，但访问过程却都是相同的，例如，先连 接数据库，再打开数据库，最后对数据进行查询。针对上述需求，可以采用( )设计模式","topicType":1,"updateB":"0"}
2022-02-16 16:46:30.387 [XNIO-1 task-1] INFO  traceId[58e200b7-ba5b-4149-9443-045102bad55b] com.example.demo.Interceptor.LogInterceptor:45 - 调用结束后删除...
2022-02-16 16:47:33.600 [XNIO-1 task-1] INFO  traceId[8a38fe89-c897-4c9a-b5ae-529f6544d55a] com.example.demo.controller.TopicManageController:33 - 提交题目信息：{"createBy":"0","errorNum":1,"img":"","optionItem":[{"correct":false,"option":"可以动态、透明地给单个对象添加职责","serialNumber":1},{"correct":true,"option":"为子系统定义了一个高层接口，这个接口使得这一子系统更加容易使用","serialNumber":2},{"correct":false,"option":"通过运用共享技术，有效支持大量细粒度的对象","serialNumber":3},{"correct":false,"option":"将抽象部分与它的实现部分分离，使它们都可以独立地变化","serialNumber":4}],"queSetId":2,"remark":"【2011 年题 13 解析】 外观(façade)模式是对象的结构模式，要求外部与一个子系统的通信必须通过一个统一 的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接 口，这个接口使得这一子系统更加容易使用。 【答案】B。","topicDesc":"【2012 年题 13】若系统中的某子模块需要为其他模块提供访问不同数据库系统的功能， 这些数据库系统提供的访问接口有一定的差异，但访问过程却都是相同的，例如，先连 接数据库，再打开数据库，最后对数据进行查询。针对上述需求，可以采用( XX)设计模式抽象出相同的数据库访问过程，该设计模式(? )。","topicType":1,"updateB":"0"}
2022-02-16 16:47:33.623 [XNIO-1 task-1] INFO  traceId[8a38fe89-c897-4c9a-b5ae-529f6544d55a] com.example.demo.Interceptor.LogInterceptor:45 - 调用结束后删除...
2022-02-16 16:49:03.184 [XNIO-1 task-1] INFO  traceId[4ce49bf1-692d-48f8-9cc2-724eef019c97] com.example.demo.controller.TopicManageController:33 - 提交题目信息：{"createBy":"0","errorNum":1,"img":"","optionItem":[{"correct":true,"option":"比静态继承具有更大的灵活性","serialNumber":1},{"correct":false,"option":"提高已有功能的重复使用性","serialNumber":2},{"correct":false,"option":"可以将接口与实现相分离","serialNumber":3},{"correct":false,"option":"为复杂系统提供了简单接口","serialNumber":4}],"queSetId":2,"remark":"【2013 年题 24 解析】 装饰模式：动态地给一个对象添加一些额外的职责。它提供了用子类扩展功能的一个灵 活的替代，比派生一个子类更加灵活。 在本题中，“现需要构造带有滚动条或者带有黑色边框，或者既有滚动条又有黑色边框 的文本显示控件和图片显示控件”，从此处可以看出需要能为构件灵活附加功能的机制，这 与装饰模式的情况是吻合的。这样做比静态继承具有更大的灵活性。 【答案】A。","topicDesc":"【2013 年题 24】某系统中的文本显示类( TextView )和图片显示类( PictureView )都继承 了组件类( Component )，分别显示文本和图片内容，现需要构造带有滚动条或者带有黑 色边框，或者既有滚动条又有黑色边框的文本显示控件和图片显示控件，但希望最多只 增加 3 个类。那么采用设计模式(XX )可实现该需求，其优点是( ?)。","topicType":1,"updateB":"0"}
2022-02-16 16:49:03.209 [XNIO-1 task-1] INFO  traceId[4ce49bf1-692d-48f8-9cc2-724eef019c97] com.example.demo.Interceptor.LogInterceptor:45 - 调用结束后删除...
2022-02-16 16:51:31.519 [XNIO-1 task-1] INFO  traceId[fc6664bf-c795-40d1-be3a-6cd398d67680] com.example.demo.controller.TopicManageController:33 - 提交题目信息：{"createBy":"0","errorNum":1,"img":"","optionItem":[{"correct":false,"option":"Decorator","serialNumber":1},{"correct":false,"option":"Adapter","serialNumber":2},{"correct":true,"option":"Bridge","serialNumber":3},{"correct":false,"option":"Facade","serialNumber":4}],"queSetId":2,"remark":"【2014 年题 23 解析】 本题考点是设计模式，不同的设计模式可以应用于不同的场景，在本题题干部分提到宣 传产品有多种表现形式，又有多种媒介，如果用一棵类树来表达，必然会带来“类爆炸”(题 目中增加一种媒介，代码实现中需要增加多个类)的问题，所以使用桥接模式是合适的。桥 接模式的最核心特点便是：将抽象部分与它的实现部分分离，使它们都可以独立地变化。 【答案】C。","topicDesc":"【2014 年题 23】某广告公司的宣传产品有宣传册、文章、传单等多种形式，宣传产品 的出版方式包括纸质方式、CD、DVD、在线发布等。现要求为该广告公司设计一个管 理这些宣传产品的应用，采用( )设计模式较为合适","topicType":1,"updateB":"0"}
2022-02-16 16:51:31.546 [XNIO-1 task-1] INFO  traceId[fc6664bf-c795-40d1-be3a-6cd398d67680] com.example.demo.Interceptor.LogInterceptor:45 - 调用结束后删除...
2022-02-16 16:52:30.302 [XNIO-1 task-1] INFO  traceId[56b12776-4af1-462a-89e3-51dc5537269b] com.example.demo.controller.TopicManageController:33 - 提交题目信息：{"createBy":"0","errorNum":1,"img":"","optionItem":[{"correct":false,"option":"将一系列复杂的类包装成一个简单的封闭接口","serialNumber":1},{"correct":true,"option":"将抽象部分与它的实现部分分离，使它们都可以独立地变化","serialNumber":2},{"correct":false,"option":"可在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责","serialNumber":3},{"correct":false,"option":"将一个接口转换为客户希望的另一个接口","serialNumber":4}],"queSetId":2,"remark":"【2014 年题 23 解析】 本题考点是设计模式，不同的设计模式可以应用于不同的场景，在本题题干部分提到宣 传产品有多种表现形式，又有多种媒介，如果用一棵类树来表达，必然会带来“类爆炸”(题 目中增加一种媒介，代码实现中需要增加多个类)的问题，所以使用桥接模式是合适的。桥 接模式的最核心特点便是：将抽象部分与它的实现部分分离，使它们都可以独立地变化。 【答案】B。","topicDesc":"【2014 年题 23】某广告公司的宣传产品有宣传册、文章、传单等多种形式，宣传产品 的出版方式包括纸质方式、CD、DVD、在线发布等。现要求为该广告公司设计一个管 理这些宣传产品的应用，采用(xx )设计模式较为合适，该模式( )。","topicType":1,"updateB":"0"}
2022-02-16 16:52:30.309 [XNIO-1 task-1] INFO  traceId[56b12776-4af1-462a-89e3-51dc5537269b] com.example.demo.Interceptor.LogInterceptor:45 - 调用结束后删除...
2022-02-16 16:53:43.446 [XNIO-1 task-1] INFO  traceId[7b26672c-8358-4001-af7c-ee75844d5b1d] com.example.demo.controller.TopicManageController:33 - 提交题目信息：{"createBy":"0","errorNum":1,"img":"","optionItem":[{"correct":false,"option":"客户端程序","serialNumber":1},{"correct":true,"option":"操作系统 API 函数","serialNumber":2},{"correct":false,"option":"TCP 协议 API 函数","serialNumber":3},{"correct":false,"option":"登录连接程序","serialNumber":4}],"queSetId":2,"remark":"【2014 年题 33 解析】 针对题目给出的情况，公司的架构师决定采用“包装器外观”架构模式解决操作系统的差 异问题。具体来说，服务端程序应该在包装器外观的实例上调用需要的方法，然后将请求和 请求的参数发送给操作系统 API 函数，调用成功后将结果返回。使用该模式提高了底层代 码访问的一致性，但降低了服务端程序的调用性能。 【答案】B。","topicDesc":"【2014 年题 33】某公司欲开发一个用于分布式登录的服务端程序，使用面向连接的 TCP 协议并发地处理多客户端登录请求。用户要求该服务端程序运行在 Linux、Solaris 和 WindowsNT 等多种操作系统平台之上，而不同的操作系统的相关 API 函数和数据都有 所不同。针对这种情况，公司的架构师决定采用“包装器外观(Wrapper Facade)”架构模 式解决操作系统的差异问题。具体来说，服务端程序应该在包装器外观的实例上调用需 要的方法，然后将请求和请求的参数发送给( )。","topicType":1,"updateB":"0"}
2022-02-16 16:53:43.469 [XNIO-1 task-1] INFO  traceId[7b26672c-8358-4001-af7c-ee75844d5b1d] com.example.demo.Interceptor.LogInterceptor:45 - 调用结束后删除...
2022-02-16 16:54:54.340 [XNIO-1 task-1] INFO  traceId[57271d09-6084-4daa-aaf1-367f0b6487ba] com.example.demo.controller.TopicManageController:33 - 提交题目信息：{"createBy":"0","errorNum":1,"img":"","optionItem":[{"correct":true,"option":"提高了底层代码访问的一致性，但降低了服务端程序的调用性能","serialNumber":1},{"correct":false,"option":"降低了服务端程序功能调用的灵活性，但提高了服务端程序的调用性能","serialNumber":2},{"correct":false,"option":"降低了服务端程序的可移植性，但提高了服务端程序的可维护性","serialNumber":3},{"correct":false,"option":"提高了系统的可复用性，但降低了系统的可配置性","serialNumber":4}],"queSetId":2,"remark":"【2014 年题 33 解析】 针对题目给出的情况，公司的架构师决定采用“包装器外观”架构模式解决操作系统的差 异问题。具体来说，服务端程序应该在包装器外观的实例上调用需要的方法，然后将请求和 请求的参数发送给操作系统 API 函数，调用成功后将结果返回。使用该模式提高了底层代 码访问的一致性，但降低了服务端程序的调用性能。 【答案】A。","topicDesc":"【2014 年题 33】某公司欲开发一个用于分布式登录的服务端程序，使用面向连接的 TCP 协议并发地处理多客户端登录请求。用户要求该服务端程序运行在 Linux、Solaris 和 WindowsNT 等多种操作系统平台之上，而不同的操作系统的相关 API 函数和数据都有 所不同。针对这种情况，公司的架构师决定采用“包装器外观(Wrapper Facade)”架构模 式解决操作系统的差异问题。具体来说，服务端程序应该在包装器外观的实例上调用需 要的方法，然后将请求和请求的参数发送给( XX)，调用成功后将结果返回。使用该模式 ( )。","topicType":1,"updateB":"0"}
2022-02-16 16:54:54.364 [XNIO-1 task-1] INFO  traceId[57271d09-6084-4daa-aaf1-367f0b6487ba] com.example.demo.Interceptor.LogInterceptor:45 - 调用结束后删除...
2022-02-16 16:59:46.330 [XNIO-1 task-1] INFO  traceId[52bd3445-8c17-4dc1-b527-e323ef1a48c0] com.example.demo.controller.TopicManageController:33 - 提交题目信息：{"createBy":"0","errorNum":1,"img":"\\profile\\upload\\common-resource\\pmp\\ed033aec-5e99-4626-9e6f-fb5b9e4435c7.png","optionItem":[{"correct":true,"option":"Shape","serialNumber":1},{"correct":false,"option":"Drawing","serialNumber":2},{"correct":false,"option":"Rectangle","serialNumber":3},{"correct":false,"option":"V2Drawing","serialNumber":4}],"queSetId":2,"remark":"【2015 年题 24 解析】图中与 Bridge 模式中的“Abstraction”角色相对应的类是 Shape，与“Implementor”角 色相对应的类是 Drawing。。 【答案】A。","topicDesc":"【2015 年题 24】某软件公司欲开发一个绘图软件，要求使用不同的绘图程序绘制不同 的图形。在明确用户需求后，该公司的架构师决定采用 Bridge 模式实现该软件，并设 计 UML 类图如下图所示。图中与 Bridge 模式中的“Abstraction”角色相对应的类是（ ）","topicType":1,"updateB":"0"}
2022-02-16 16:59:46.353 [XNIO-1 task-1] INFO  traceId[52bd3445-8c17-4dc1-b527-e323ef1a48c0] com.example.demo.Interceptor.LogInterceptor:45 - 调用结束后删除...
2022-02-16 17:00:20.542 [XNIO-1 task-1] INFO  traceId[b9d571d0-b097-4831-8286-2d1bb6403c97] com.example.demo.controller.TopicManageController:33 - 提交题目信息：{"createBy":"0","errorNum":1,"img":"\\profile\\upload\\common-resource\\pmp\\ed033aec-5e99-4626-9e6f-fb5b9e4435c7.png","optionItem":[{"correct":true,"option":"Shape","serialNumber":1},{"correct":false,"option":"Drawing","serialNumber":2},{"correct":false,"option":"Rectangle","serialNumber":3},{"correct":false,"option":"V2Drawing","serialNumber":4}],"queSetId":2,"remark":"【2015 年题 24 解析】图中与 Bridge 模式中的“Abstraction”角色相对应的类是 Shape，与“Implementor”角 色相对应的类是 Drawing。。 【答案】B。","topicDesc":"【2015 年题 24】某软件公司欲开发一个绘图软件，要求使用不同的绘图程序绘制不同 的图形。在明确用户需求后，该公司的架构师决定采用 Bridge 模式实现该软件，并设 计 UML 类图如下图所示。图中与 Bridge 模式中的“Abstraction”角色相对应的类是（ XX）,与“Implementor”角色相对应的类是（ ）。","topicType":1,"updateB":"0"}
2022-02-16 17:00:20.549 [XNIO-1 task-1] INFO  traceId[b9d571d0-b097-4831-8286-2d1bb6403c97] com.example.demo.Interceptor.LogInterceptor:45 - 调用结束后删除...
2022-02-16 17:02:59.158 [XNIO-1 task-1] INFO  traceId[c71097f1-6ce9-4bec-9b9a-fa584603804e] com.example.demo.controller.TopicManageController:33 - 提交题目信息：{"createBy":"0","errorNum":1,"img":"","optionItem":[{"correct":true,"option":"Command","serialNumber":1},{"correct":false,"option":"Facade","serialNumber":2},{"correct":false,"option":"Memento","serialNumber":3},{"correct":false,"option":"Visitor","serialNumber":4}],"queSetId":2,"remark":"【2018 年题 36 解析】 抽象工厂模式是一种类创建型模式。 桥接模式(Bridge)-将抽象部分与它的实现部分分离,使它们都可以独立地变化，它是一种 对象结构型模式。 命令（Command）模式将一个请求封装为一个对象，从而可用不同的请求对客户进行 参数化，将请求排队或记录请求日志，支持可撤销的操作。 答案 A。","topicDesc":"【2018 年题 36】设计模式描述了一个出现在特定设计语境中的设计再现问题，并为它 的解决方案提供了一个经过充分验证的通用方案，不同的设计模式关注解决不同的问 题。例如，（）模式将一个请求封装为 一个对象，从而可用不同的请求对客户进行参数化，将请求排队或记录请求日志，支持 可撤销的操作。","topicType":1,"updateB":"0"}
2022-02-16 17:02:59.182 [XNIO-1 task-1] INFO  traceId[c71097f1-6ce9-4bec-9b9a-fa584603804e] com.example.demo.Interceptor.LogInterceptor:45 - 调用结束后删除...
